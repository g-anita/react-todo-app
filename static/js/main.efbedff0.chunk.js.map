{"version":3,"sources":["TodoForm.js","Todo.js","Todos.js","App.js","serviceWorker.js","index.js"],"names":["TodoForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","todoText","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","defineProperty","target","name","value","preventDefault","onSave","objectSpread","react_default","a","createElement","onSubmit","className","type","key","autoComplete","onChange","placeholder","Component","Todo","_this$props","id","onDelete","onClick","Todos","todos","map","todo","i","src_Todo_0","assign","App","nextId","handleSave","filter","_this2","prevState","newTodo","concat","toConsumableArray","src_TodoForm_0","src_Todos_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.efbedff0.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './TodoForm.css'\n\nclass TodoForm extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      todoText: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\nhandleChange(event){\n  this.setState(\n    {[event.target.name]: event.target.value}\n  );\n}\n\nhandleSubmit(event){\n  event.preventDefault();\n  this.props.onSave({...this.state});\n  this.setState({\n    todoText: '',\n  })\n}\n\n  render(){\n    const {todoText} = this.state;\n    return(\n    <form onSubmit={this.handleSubmit}>\n      <input\n          className=\"todo-input\"\n          name='todoText'\n          type='text'\n          key='todoText'\n          value={todoText}\n          autoComplete=\"off\"\n          onChange={this.handleChange}\n          placeholder=\"Add New Todo\"\n      />\n    </form>\n    )\n  }\n}\n\nexport default TodoForm\n","import React, { Component } from 'react';\nimport './Todo.css'\n\nclass Todo extends Component {\n  render() {\n  const {id, todoText, onDelete} = this.props;\n\n  return (\n    <div className=\"todo-container\">\n      <ul>\n        <li className=\"todo-item\">\n          <button className=\"delete-btn\" type=\"button\" onClick={() => onDelete(id)}>X</button>\n          {todoText}\n        </li>\n      </ul>\n    </div>\n    )\n  }\n}\n\nexport default Todo\n","import React, { Component } from 'react';\nimport Todo from './Todo';\nimport './Todos.css'\n\nclass Todos extends Component {\n\n  render(){\n    const {onDelete} = this.props\n    const todos = this.props.todos.map((todo, i) => (\n      <Todo key={todo.id} {...todo} onDelete={onDelete} />\n    ))\n\n    return (\n      <div className=\"todos-container\">\n        {todos}\n      </div>\n    );\n  }\n}\n\nexport default Todos\n","import React, { Component } from 'react';\nimport TodoForm from './TodoForm';\nimport Todos from './Todos';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      todos: [],\n      todoText: \"\",\n      nextId: 0,\n    }\n    this.onDelete = this.onDelete.bind(this);\n    this.handleSave = this.handleSave.bind(this);\n}\n\nonDelete(id){\n  const todos = this.state.todos.filter(todo => todo.id !== id);\n  this.setState({todos});\n}\n\nhandleSave(todo) {\n  this.setState((prevState, props) => {\n    const newTodo = {...todo, id: this.state.nextId};\n    return {\n      nextId: prevState.nextId + 1,\n      todos: [...this.state.todos, newTodo],\n    }\n  });\n}\n\n  render() {\n    return (\n      <div className=\"App-container\">\n        <header className=\"header-container\">Todo List</header>\n        <TodoForm onSave={this.handleSave}/>\n        <Todos onDelete={this.onDelete} todos={this.state.todos}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}